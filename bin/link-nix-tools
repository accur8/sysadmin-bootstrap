#!/usr/bin/env python3


docs = """
this script sets up symlinks in /usr/bin for the various tools that we install via nix but
are needed system wide outside of users.

currently the links java coursier a8versions
also a java11 link is made that points to java

Since this script makes changes to /usr/bin/ it must be run as root.

"""

from pathlib import Path
import sys



def createSymlink(target: Path, link: Path) -> None:
    linkExists = link.exists()
    if not link.parent.exists():
        link.parent.makedirs()
    if overwrite or not linkExists:
        if linkExists:
            link.unlink();
        if not target.exists():
            logWarning(f"target path does not exist @ {target}")
        else:
            print(f"creating symlink target={target}  link={link}")
            link.symlink_to(target)
            return True
    return False

def run(overwrite0: bool) -> None:

    global overwrite
    overwrite = overwrite0
    devHome = Path.expanduser("~dev")

    javaExecPath = devHome.joinpath(".nix-profile/bin/java").resolve()

    createSymlink(javaExecPath, Path("/usr/bin/java11"))
    createSymlink(javaExecPath, Path("/usr/bin/java"))
    createSymlink(devHome.joinpath(".nix-profile/bin/coursier").resolve(), Path("/usr/bin/coursier"))
    createSymlink(devHome.joinpath(".nix-profile/bin/a8-versions").resolve(), Path("/usr/bin/a8-versions"))

def run_test(overwrite0: bool) -> None:
    global overwrite
    overwrite = overwrite0
    print(f"run {overwrite} {overwrite0}")


def main() -> None:

    import argparse
    parser = argparse.ArgumentParser(
        prog = 'link-nix-tools',
        description = docs,
    )
    # parser.add_argument("--run", help="do the actual thing", action='store_true')
    subparsers = parser.add_subparsers(dest="command", help='sub-commands')
    runParser = subparsers.add_parser("run", help='do the actual work and change the system')
    runParser.add_argument("--force", "-f", action='store_true', help='force the link creation i.e. overwrite existing links')
    subparsers.add_parser("help", help='print this help')
    args = parser.parse_args()
    if args.command == "run":
        run(args.force)
    elif args.command == "help":
        parser.print_help()
    else:
        badargs = " ".join(sys.argv[1:])
        print(f"don't know how to handle command of {args.command} in {badargs}")
        parser.print_help()


if __name__ == '__main__':
    main()